crear_log_verosim <- function(n, n_err){
# n es tamaño de muestra
# n_err el número de errores detectados (datos)
n_corr <- n - n_err
log_verosim <- function(p){
n_err * log(p) + n_corr * log(1-p)
}
}
crear_log_verosim(100, 50)
# Crear la función de log-verosimilitud
log_verosim_func <- crear_log_verosim(n = 500, n_err = 121)
# Maximizar la log-verosimilitud para encontrar la estimación de p
resultado <- optimize(log_verosim_func, c(0, 1), maximum = TRUE)
resultado$maximum  # Este es el valor estimado de p que maximiza la verosimilitud
library(ggplot2)
library(tibble)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = log_verosim_func(p))
library(tidyr)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = log_verosim_func(p))
librar(dplyr)
library(dplyr)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = log_verosim_func(p))
View(grafica_tbl)
# Graficar la función de log-verosimilitud
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
labs(
title = "Función de log-verosimilitud en función de p",
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
library(ggplot2)
library(tibble)
library(dplyr)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = log_verosim_func(p))
# Graficar la función de log-verosimilitud
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
geom_vline(xintercept = resultado$maximum, color = "red", linetype = "dashed") +
labs(
title = "Función de log-verosimilitud en función de p",
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
library(ggplot2)
library(tibble)
library(dplyr)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = sapply(p, log_verosim_func))
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
geom_vline(xintercept = resultado$maximum, color = "red", linetype = "dashed") +
labs(
title = "Función de log-verosimilitud en función de p",
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
p = seq(0, 1, 0.001)
p
tibble(p = seq(0, 1, 0.001))
tibble(p = seq(0, 1, 0.001))
?tibblw
?tibble
?tibble
library(ggplot2)
library(tibble)
library(dplyr)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = sapply(p, log_verosim_func))
# Graficar la función de log-verosimilitud
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
geom_vline(xintercept = resultado$maximum, color = "red", linetype = "dashed") +
labs(
title = "Función de log-verosimilitud en función de p",
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
# Crear la función de log-verosimilitud específica para los datos observados con 317 errores
log_verosim_func <- crear_log_verosim(n = 500, n_err = 317)
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = sapply(p, log_verosim_func))
resultado <- optimize(log_verosim_func, c(0, 1), maximum = TRUE)
p_max <- resultado$maximum
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
geom_vline(xintercept = p_max, color = "red", linetype = "dashed") +
labs(
title = "Función de log-verosimilitud en función de p",
subtitle = paste("Máximo estimado en p =", round(p_max, 4)),
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
# Graficar la función de log-verosimilitud
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
geom_vline(xintercept = resultado$maximum, color = "red", linetype = "dashed") +
labs(
title = "Función de log-verosimilitud en función de p",
subtitle = paste("Máximo estimado en p =", round(resultado$maximum, 4)),
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
crear_log_verosim <- function(n, n_err){
# n es tamaño de muestra
# n_err el número de errores detectados (datos)
n_corr <- n - n_err
log_verosim <- function(p){
n_err * log(p) + n_corr * log(1-p)
}
}
crear_log_verosim(100, 50)
# Crear la función de log-verosimilitud
log_verosim_func <- crear_log_verosim(n = 500, n_err = 121)
# Maximizar la log-verosimilitud para encontrar la estimación de p
resultado <- optimize(log_verosim_func, c(0, 1), maximum = TRUE)
resultado$maximum  # Este es el valor estimado de p que maximiza la verosimilitud
library(ggplot2)
library(tibble)
library(dplyr)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = sapply(p, log_verosim_func))
# Graficar la función de log-verosimilitud
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
geom_vline(xintercept = resultado$maximum, color = "red", linetype = "dashed") +
labs(
title = "Función de log-verosimilitud en función de p",
subtitle = paste("Máximo estimado en p =", round(resultado$maximum, 4)),
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
# Crear la función de log-verosimilitud específica para los datos observados con 317 errores
log_verosim_func <- crear_log_verosim(n = 500, n_err = 317)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = sapply(p, log_verosim_func))
# Encontrar el valor de p que maximiza la verosimilitud
resultado <- optimize(log_verosim_func, c(0, 1), maximum = TRUE)
p_max <- resultado$maximum
# Graficar la función de log-verosimilitud con la línea en el valor que maximiza
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
geom_vline(xintercept = p_max, color = "red", linetype = "dashed") +
labs(
title = "Función de log-verosimilitud en función de p",
subtitle = paste("Máximo estimado en p =", round(p_max, 4)),
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
ggplot(data = data.frame(x = x), aes(x = x)) +
geom_histogram(binwidth = 0.5, color = "black", fill = "skyblue") +
labs(
title = "Histograma de la muestra",
x = "Valores de la muestra",
y = "Frecuencia"
) +
theme_minimal()
#fijamos semilla
set.seed(1234)
m <- runif(1, 5, 10) # media entre 5 y 10
desv_est <- runif(1, 0, 2) # desviación estándar entre 0 y 2
#simulamos una muestra con la que trabajaremos.
x <- rnorm(150, mean = m, sd = desv_est)
# Definimos la función de log-verosimilitud para los parámetros mu y sigma
log_verosimilitud_normal <- function(mu, sigma, data) {
n <- length(data)
-n * log(sigma) - sum((data - mu)^2) / (2 * sigma^2)
}
# Graficar el histograma de la muestra x
ggplot(data = data.frame(x = x), aes(x = x)) +
geom_histogram(binwidth = 0.5, color = "black", fill = "skyblue") +
labs(
title = "Histograma de la muestra",
x = "Valores de la muestra",
y = "Frecuencia"
) +
theme_minimal()
# Graficar el histograma de la muestra x
ggplot(data = data.frame(x = x), aes(x = x)) +
geom_histogram(binwidth = 0.2, color = "black", fill = "skyblue") +
labs(
title = "Histograma de la muestra",
x = "Valores de la muestra",
y = "Frecuencia"
) +
theme_minimal()
# Graficar el histograma de la muestra x
ggplot(data = data.frame(x = x), aes(x = x)) +
geom_histogram(binwidth = 0.4, color = "black", fill = "skyblue") +
labs(
title = "Histograma de la muestra",
x = "Valores de la muestra",
y = "Frecuencia"
) +
theme_minimal()
# Estimación de la media y la desviación estándar usando el estimador plug-in
media_est <- mean(x)
de_est <- sd(x)
# Estimación de la media y la desviación estándar usando el estimador plug-in
media_est <- mean(x)
de_est <- sd(x)
# Definimos la función generadora de la log-verosimilitud para una muestra
crear_log_p <- function(x) {
log_p <- function(pars) {
media <- pars[1]
desv_est <- pars[2]
n <- length(x)
z <- (x - media) / desv_est
log_verosim <- -n * log(desv_est) - 0.5 * mean(z^2)
return(log_verosim)
}
return(log_p)
}
# Creamos la función de log-verosimilitud específica para nuestra muestra
log_p <- crear_log_p(x)
# Realizamos la optimización para encontrar los valores que maximizan la verosimilitud
# Usamos como valores iniciales media = 0 y sigma = 0.5, y aplicamos optimización numérica
res <- optim(c(0, 0.5), log_p, control = list(fnscale = -1, maxit = 1000), method = "Nelder-Mead")
# Mostrar los resultados
res$convergence  # 0 indica que la optimización fue exitosa
res$par  # Los valores óptimos de media y desviación estándar
# Formateamos los resultados en un tibble para que sea similar al ejemplo
library(tibble)
est_mv <- tibble(
parametro = c("media", "sigma"),
estimador = res$par
)
est_mv
View(res)
View(resultado)
View(resultado)
# Realizamos la optimización para encontrar los valores que maximizan la verosimilitud
# Usamos como valores iniciales media = 0 y sigma = 0.5, y aplicamos optimización numérica
res <- optim(c(0, 0.5), log_p, control = list(fnscale = -1, maxit = 1000), method = "Nelder-Mead")
# Mostrar los resultados
res$convergence  # 0 indica que la optimización fue exitosa
# Resultados de la optimización
mu_optimizado <- res$par[1]
sigma_optimizado <- res$par[2]
# Estimaciones muestrales directas (paso 3)
media_est <- mean(muestra)
de_est <- sd(muestra)
# Estimaciones muestrales directas (paso 3)
media_est <- mean(x)
de_est <- sd(x)
# Crear un tibble para comparar los resultados
library(tibble)
comparacion <- tibble(
parametro = c("media", "sigma"),
estimador_muestral = c(media_est, de_est),
estimador_maxima_verosimilitud = c(mu_optimizado, sigma_optimizado)
)
# Mostrar la comparación
comparacion
sim_modelo <- function(p, n){
# rellena: qué es p y n
muestra <- rbinom(n, 1, p)
n_errores <- sum(muestra)
n_errores
}
# Definimos los parámetros para la simulación
p <- 0.3    # Probabilidad de error
n <- 500    # Tamaño de la muestra
# Calculamos una simulación del número de errores
n_errores_simulados <- sim_modelo(p, n)
# Mostramos el resultado
n_errores_simulados
# Estimador puntual de máxima verosimilitud para p (calculado previamente)
p_max <- resultado$maximum  # Este es el valor de p que maximiza la verosimilitud
# Tamaño de cada muestra
n <- 500
# Número de simulaciones
n_simulaciones <- 3000
# Simulamos 3,000 observaciones del número de errores usando el estimador puntual p_max
set.seed(123)
simulaciones <- replicate(n_simulaciones, sim_modelo(p_max, n))
# Mostrar las primeras 10 simulaciones como ejemplo
head(simulaciones, 10)
# Crear la función de log-verosimilitud específica para los datos observados con 317 errores
log_verosim_func <- crear_log_verosim(n = 500, n_err = 317)
# Generar una tabla con valores de p y la verosimilitud correspondiente
grafica_tbl <- tibble(p = seq(0, 1, 0.001)) %>%
mutate(log_verosimilitud = sapply(p, log_verosim_func))
# Encontrar el valor de p que maximiza la verosimilitud
resultado <- optimize(log_verosim_func, c(0, 1), maximum = TRUE)
p_max <- resultado$maximum
# Graficar la función de log-verosimilitud con la línea en el valor que maximiza
ggplot(grafica_tbl, aes(x = p, y = log_verosimilitud)) +
geom_line() +
geom_vline(xintercept = p_max, color = "red", linetype = "dashed") +
labs(
title = "Función de log-verosimilitud en función de p",
subtitle = paste("Máximo estimado en p =", round(p_max, 4)),
x = "Probabilidad de error (p)",
y = "Log-verosimilitud"
) +
theme_minimal()
# Estimador puntual de máxima verosimilitud para p (calculado previamente)
p_max <- resultado$maximum  # Este es el valor de p que maximiza la verosimilitud
# Tamaño de cada muestra
n <- 500
# Número de simulaciones
n_simulaciones <- 3000
# Simulamos 3,000 observaciones del número de errores usando el estimador puntual p_max
set.seed(123)
simulaciones <- replicate(n_simulaciones, sim_modelo(p_max, n))
# Mostrar las primeras 10 simulaciones como ejemplo
head(simulaciones, 10)
encontrar_mv <- function(n, n_err) {
# Crear la función de log-verosimilitud para una cantidad fija de errores
log_ver <- function(p) {
n_err * log(p) + (n - n_err) * log(1 - p)
}
# Maximizar la log-verosimilitud para encontrar el mejor valor de p
res <- optimize(log_ver, c(0, 1), maximum = TRUE)
# Devolver el valor de p que maximiza la verosimilitud
res$maximum
}
# Aplicar la función a cada simulación para calcular el estimador de máxima verosimilitud de p
# Usamos el vector `simulaciones` que contiene el número de errores en cada simulación
estimadores_mv <- sapply(simulaciones, function(n_err) encontrar_mv(n = 500, n_err))
# Mostrar los primeros 10 estimadores de máxima verosimilitud como ejemplo
head(estimadores_mv, 10)
summary(estimadores_mv)
library(ggplot2)
# Graficar el histograma de la distribución bootstrap de los estimadores de máxima verosimilitud
ggplot(data = data.frame(estimadores_mv = estimadores_mv), aes(x = estimadores_mv)) +
geom_histogram(binwidth = 0.01, color = "black", fill = "skyblue") +
labs(
title = "Distribución Bootstrap de los Estimadores de Máxima Verosimilitud",
x = "Estimadores de Máxima Verosimilitud (p)",
y = "Frecuencia"
) +
theme_minimal()
# Calcular el error estándar de la estimación de máxima verosimilitud
error_estandar <- sd(estimadores_mv)
error_estandar
